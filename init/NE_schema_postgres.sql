-- ===========================================================
-- PostgreSQL conversion of selected objects from NE_schema.sql
-- Conventions: quoted identifiers to preserve original names.
-- Schema: public
-- ===========================================================

set search_path to public;

-- ---------- DOMAIN TYPES (SQL Server user-defined types) ----------
-- SQL Server:
--   CREATE TYPE [dbo].[BlockType] FROM [smallint] NOT NULL
--   CREATE TYPE [dbo].[SensorType] FROM [smallint] NOT NULL
drop domain if exists "BlockType" cascade;
drop domain if exists "SensorType" cascade;

create domain "BlockType" as smallint not null;
create domain "SensorType" as smallint not null;

-- ---------- TABLE: Folder ----------
-- (Kept minimal now; uniqueness & FKs can be added later)
drop table if exists "Folder" cascade;
create table "Folder" (
  "ID"        integer generated by default as identity primary key,
  "ParentID"  integer,
  "Name"      varchar(255) not null default 'New folder',
  "Flags"     integer
);

-- ---------- TABLE: Block ----------
-- Notes:
--   - IDENTITY → generated by default as identity
--   - [image] → bytea
--   - tinyint → smallint
drop table if exists "Block" cascade;
create table "Block" (
  "ID"                   integer generated by default as identity primary key,
  "FolderID"             integer,
  "Name"                 varchar(252) not null,
  "BlockType"            integer,  -- kept as integer (domain was not used here)
  "StartTime"            timestamp without time zone,
  "StartTimeMs"          smallint not null default 0,
  "FileName"             varchar(255),
  "FlagsData"            integer,
  "FlagsReading"         integer,
  "MinEasting"           double precision,
  "MaxEasting"           double precision,
  "MinNorthing"          double precision,
  "MaxNorthing"          double precision,
  "MinKP"                double precision,
  "MaxKP"                double precision,
  "MinFix"               double precision,
  "MaxFix"               double precision,
  "Duration"             integer,
  "NumberOfValues"       integer,
  "EstimatedSize"        double precision,
  "TideZoffset"          double precision,
  "TideXreference"       double precision,
  "TideYreference"       double precision,
  "FileData"             bytea,
  "UTCStartTime"         timestamp without time zone,
  "LastEditTime"         timestamp without time zone,
  "LastEditApp"          varchar(32),
  "Revision"             integer not null default 0,
  "Status"               smallint not null default 0,
  "BatchJobStatus"       smallint not null default 0,
  "OpenedByUser"         varchar(64),
  "OpenedByWorkstation"  varchar(64),
  "OpenedByApp"          varchar(32)
);

-- ---------- TABLE: Position ----------
-- Notes:
--   - float → double precision
--   - real → real
drop table if exists "Position" cascade;
create table "Position" (
  "BlockID"     integer not null,
  "seq"         smallint not null default 0,
  "Time"        integer not null,
  "Easting"     double precision not null,
  "Northing"    double precision not null,
  "Fix"         integer,
  "Kp"          double precision,
  "Dal"         double precision,
  "Dol"         double precision,
  "Radius"      double precision,
  "DOP"         double precision,
  "Quality"     smallint,
  "StdDevEast"  real,
  "StdDevNorth" real,
  constraint "PK_Position" primary key ("BlockID", "seq", "Time")
);

-- ---------- TABLE: GPSStatus ----------
drop table if exists "GPSStatus" cascade;
create table "GPSStatus" (
  "BlockID"     integer  not null,
  "seq"         smallint not null default 0,
  "Time"        integer  not null,
  "HDOP"        real     not null default 0,
  "VDOP"        real     not null default 0,
  "PDOP"        real     not null default 0,
  "NoSat"       integer  not null default 0,
  "Quality"     integer  not null default 0,
  "FixStatus"   integer  not null default 0,
  "RefStationNo" smallint not null default 0,
  constraint "PK_GPSStatus" primary key ("BlockID", "seq", "Time")
);

-- ---------- TABLE: SurveyBlock ----------
-- Notes:
--   - IDENTITY → generated identity
--   - bit → boolean (defaults 0→false / 1→true)
drop table if exists "SurveyBlock" cascade;
create table "SurveyBlock" (
  "ID"                        integer generated by default as identity primary key,
  "BlockID"                   integer not null,
  "ZwindowMin"                double precision,
  "ZwindowMax"                double precision,
  "XwindowMin"                double precision not null default -5000,
  "XwindowMax"                double precision not null default  5000,
  "TimeWindowMin"             integer,
  "TimeWindowMax"             integer,
  "EastWindowMin"             double precision,
  "EastWindowMax"             double precision,
  "NorthWindowMin"            double precision,
  "NorthWindowMax"            double precision,
  "PipeDiameter"              double precision,
  "GainCalcGyro"              double precision,
  "ScanReduction"             integer not null default 1,
  "CTDProfileSelection"       integer default 1,
  "CTDProfileUsage"           integer default 0,
  "CTDProfileInterval"        double precision default 10,
  "CTDLayerInterval"          double precision default 1,
  "OnlineSVUsage"             smallint,
  "OnlineSVStart"             double precision default -10,
  "OnlineSVEnd"               double precision default 0,
  "MaxDOP"                    double precision default 100,
  "TideAirPressureSeqNo"      integer,
  "TideProfileUsage"          integer,
  "TideAirPressureType"       integer,
  "TideAirPressureFixed"      double precision,
  "TideAirPressureReference"  double precision,
  "TideAirPressureCorrection" boolean not null default false,
  "SVProfileSelection"        integer not null default 0,
  "SVProfileUsage"            integer not null default 0,
  "SVProfileInterval"         double precision not null default 100,
  "SVLayerInterval"           double precision not null default 1,
  "Client"                    varchar(64),
  "Job"                       varchar(64),
  "Area"                      varchar(64),
  "Vessel"                    varchar(64)
);


-- ---------- TABLE: Gyro ----------
drop table if exists "Gyro" cascade;
create table "Gyro" (
  "BlockID"  integer  not null,
  "seq"      smallint not null default 0,
  "Time"     integer  not null,
  "Gyro"     real     not null,
  "GyroCorr" real     not null default 0,
  constraint "PK_Gyro" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: Acceleration ----------
drop table if exists "Acceleration" cascade;
create table "Acceleration" (
  "BlockID" integer  not null,
  "seq"     smallint not null default 0,
  "Time"    integer  not null default 0,
  "AccX"    real     not null,
  "AccY"    real     not null,
  "AccZ"    real     not null,
  constraint "PK_Acceleration" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: Alarm ----------
drop table if exists "Alarm" cascade;
create table "Alarm" (
  "BlockID"   integer     not null,
  "Time"      integer     not null,
  "Easting"   double precision not null,
  "Northing"  double precision not null,
  "Source"    smallint    not null default 0,
  "Type"      varchar(16) not null,
  "AlarmText" varchar(255),
  constraint "PK_Alarm" primary key ("BlockID","Time")
);

-- ---------- TABLE: Auxiliary ----------
drop table if exists "Auxiliary" cascade;
create table "Auxiliary" (
  "BlockID" integer  not null,
  "seq"     smallint not null default 0,
  "Time"    integer  not null,
  "Aux0"    real     not null,
  "Aux1"    real     not null,
  "Aux2"    real     not null,
  "Aux3"    real     not null,
  "Aux4"    real     not null,
  "Aux5"    real     not null,
  "Aux6"    real     not null,
  "Aux7"    real     not null,
  constraint "PK_Auxiliary" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: Bathy ----------
drop table if exists "Bathy" cascade;
create table "Bathy" (
  "BlockID"    integer  not null,
  "seq"        smallint not null default 0,
  "Time"       integer  not null,
  "Depth"      real     not null,
  "Altitude"   real,
  "Pressure"   real,
  "StdDevDepth" real    not null default 0,
  constraint "PK_Bathy" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: Bin ----------
drop table if exists "Bin" cascade;
create table "Bin" (
  "BlockID"  integer          not null,
  "I"        double precision not null default 0,
  "J"        double precision not null default 0,
  "K"        double precision,
  "Easting"  double precision not null default 0,
  "Northing" double precision not null default 0,
  "Depth"    double precision
);

-- ---------- TABLE: BinGrid ----------
drop table if exists "BinGrid" cascade;
create table "BinGrid" (
  "BlockID"        integer          not null,
  "Number"         smallint         not null default 1,
  "OriginI"        double precision not null default 0,
  "OriginJ"        double precision not null default 0,
  "OriginEasting"  double precision not null default 0,
  "OriginNorthing" double precision not null default 0,
  "BinScale"       double precision not null default 1,
  "WidthI"         double precision not null default 0,
  "WidthJ"         double precision not null default 0,
  "MapBearingJ"    double precision not null default 0,
  "NodeIncI"       double precision not null default 1,
  "NodeIncJ"       double precision not null default 1,
  "Method"         integer          not null default -1,
  constraint "PK_BinGrid" primary key ("BlockID","Number")
);

-- ---------- TABLE: BinGridUnit ----------
drop table if exists "BinGridUnit" cascade;
create table "BinGridUnit" (
  "BlockID"        integer  not null,
  "Number"         smallint not null,
  "OriginI"        smallint not null,
  "OriginJ"        smallint not null,
  "OriginEasting"  smallint not null,
  "OriginNorthing" smallint not null,
  "BinScale"       smallint not null,
  "WidthI"         smallint not null,
  "WidthJ"         smallint not null,
  "MapBearingJ"    smallint not null,
  "NodeIncI"       smallint not null,
  "NodeIncJ"       smallint not null,
  constraint "PK_BinGridUnit" primary key ("BlockID","Number")
);

-- ---------- TABLE: BinNodeDefinition ----------
drop table if exists "BinNodeDefinition" cascade;
create table "BinNodeDefinition" (
  "BlockID"      integer  not null,
  "RecTypeNo"    smallint not null default 1,
  "CRS_A"        smallint not null,
  "CRS_B"        smallint not null,
  "ExtensionNo"  smallint not null default 1,
  "Extension"    varchar(256),
  constraint "PK_BinNodeDefinition" primary key ("BlockID","RecTypeNo")
);

-- ---------- TABLE: BlockLink ----------
drop table if exists "BlockLink" cascade;
create table "BlockLink" (
  "ID"       integer generated by default as identity primary key,
  "ParentID" integer  not null,
  "ChildID"  integer  not null,
  "Type"     smallint not null default 0
);

-- ---------- TABLE: C_O ----------
drop table if exists "C_O" cascade;
create table "C_O" (
  "ID"     integer generated by default as identity primary key,
  "BlockID" integer  not null,
  "seq"     smallint not null default 0,
  "Gyro"    double precision not null default 0,
  "Bathy"   double precision not null default 0,
  "Roll"    double precision not null default 0,
  "Pitch"   double precision not null default 0,
  "Heave"   double precision not null default 0
);

-- ---------- TABLE: CRS ----------
drop table if exists "CRS" cascade;
create table "CRS" (
  "BlockID"            integer   not null,
  "Number"             smallint  not null default 1,
  "Epsg"               integer,
  "Name"               varchar(128),
  "Version"            varchar(64),
  "Date"               timestamp without time zone,
  "Source"             varchar(64),
  "Details"            varchar(256),
  "TypeName"           varchar(128) not null,
  "BaseCRSNumber"      smallint,
  "HorizontalCRSNumber" smallint,
  "VerticalCRSNumber"  smallint,
  "UnitOfMeasure"      smallint not null,
  constraint "PK_CRS" primary key ("BlockID","Number")
);

-- ---------- TABLE: DatumShift ----------
drop table if exists "DatumShift" cascade;
create table "DatumShift" (
  "ID"                    integer generated by default as identity primary key,
  "BlockID"               integer,
  "Name"                  varchar(255) not null,
  "Type"                  integer      default 0,
  "SourceProjection"      integer,
  "SourceEllipsoid"       integer,
  "DestinationProjection" integer,
  "DestinationEllipsoid"  integer,
  "TranslationX"          double precision,
  "TranslationY"          double precision,
  "TranslationZ"          double precision,
  "RotationX"             double precision,
  "RotationY"             double precision,
  "RotationZ"             double precision,
  "ScaleFactor"           double precision,
  "Direction"             smallint,
  "SubType"               smallint     not null default 0
);

-- ---------- TABLE: Depth ----------
drop table if exists "Depth" cascade;
create table "Depth" (
  "BlockID"           integer  not null,
  "Time"              integer  not null,
  "EchosounderNumber" smallint not null,
  "Depth"             double precision not null,
  "Status"            smallint not null default 0,
  constraint "PK_Depth" primary key ("BlockID","Time","EchosounderNumber")
);

-- ---------- TABLE: DigitizedLine ----------
drop table if exists "DigitizedLine" cascade;
create table "DigitizedLine" (
  "BlockID" integer  not null,
  "X"       real     not null default 0,
  "Y"       real     not null default 0,
  "Z"       real     not null default 0,
  "Number"  integer  not null default 0,
  constraint "PK_DigitizedLine" primary key ("BlockID","Number")
);

-- ---------- TABLE: DopplerLog ----------
drop table if exists "DopplerLog" cascade;
create table "DopplerLog" (
  "BlockID" integer  not null,
  "seq"     smallint not null default 0,
  "Time"    integer  not null default 0,
  "Vx"      real     not null,
  "Vy"      real     not null,
  "Vz"      real,
  constraint "PK_DopplerLog" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: DynamicOffset ----------
drop table if exists "DynamicOffset" cascade;
create table "DynamicOffset" (
  "BlockID" integer  not null,
  "Time"    integer  not null,
  "dX"      double precision not null default 0,
  "dY"      double precision not null default 0,
  "dZ"      double precision not null default 0,
  "StdDev"  real    not null default 0.0,
  constraint "PK_DynamicOffset" primary key ("BlockID","Time")
);

-- ---------- TABLE: EchosounderSpecification ----------
drop table if exists "EchosounderSpecification" cascade;
create table "EchosounderSpecification" (
  "ID"                    integer generated by default as identity primary key,
  "BlockID"               integer  not null,
  "EchosounderNumber"     smallint not null,
  "MaxNumberOfBeams"      integer  not null,
  "QualityThreshold"      smallint not null,
  "SelectedBeams"         bytea,
  "Type"                  integer  not null default 1,
  "PitchCorrected"        integer  default 0,
  "RollCorrected"         smallint default 0,
  "TPEFilterMask"         integer  default 0,
  "TPEFilterX"            real     default 0,
  "TPEFilterY"            real     default 0,
  "TPEFilterZ"            real     default 0,
  "TPEFilterCombPos"      real     default 0,
  "TPEFilterMinFSize"     real     default 0,
  "CustomFlags"           smallint default 0,
  "ScanType"              smallint not null default 16,
  "NaviScanType"          smallint not null default 0,
  "Frequency"             integer  not null default 0,
  "BitField"              integer  not null default 0,
  "SwathAngle"            real     not null default 0,
  "TransmitBeamWidth"     real     not null default 0,
  "NormalisationTime"     timestamp without time zone not null default timestamp '1970-01-01 13:00:00',
  "InterferometricAngle"  real     not null default 0.0,
  "BinningAngleFilter"    real     not null default 0.0,
  "BinningAcrossFilter"   real     not null default 0.0,
  "BinningExtraFilter"    real     not null default 0.0,
  "BinningAngleActive"    boolean  not null default false,
  "BinningAcrossActive"   boolean  not null default false,
  "BinningExtraActive"    boolean  not null default false
);

-- ---------- TABLE: EditReport ----------
drop table if exists "EditReport" cascade;
create table "EditReport" (
  "ID"          integer generated by default as identity primary key,
  "BlockID"     integer not null,
  "Header"      varchar(81),
  "XY"          varchar(81),
  "Scan"        varchar(81),
  "Roll"        varchar(81),
  "Pitch"       varchar(81),
  "Heave"       varchar(81),
  "Gyro"        varchar(81),
  "Bathy"       varchar(81),
  "Tide"        varchar(81),
  "Pipetracker" varchar(81),
  "Doppler"     varchar(81),
  "Altitude"    varchar(81),
  "SingleBeam"  varchar(81),
  "GPSHeight"   varchar(81),
  "Flags"       varchar(81),
  "Pressure"    varchar(81),
  "Auxiliary"   varchar(81),
  "Alarm"       varchar(81),
  "Acceleration" varchar(81),
  "RateGyro"    varchar(81),
  "MagneticField" varchar(81)
);

-- ---------- TABLE: Ellipsoid ----------
drop table if exists "Ellipsoid" cascade;
create table "Ellipsoid" (
  "ID"               integer generated by default as identity primary key,
  "BlockID"          integer,
  "Name"             varchar(255),
  "SemiMajorAxis"    double precision,
  "InverseFlattening" double precision,
  "SubType"          smallint not null default 0
);

-- ---------- TABLE: EPSG ----------
drop table if exists "EPSG" cascade;
create table "EPSG" (
  "ID"      integer generated by default as identity primary key,
  "BlockID" integer not null,
  "Text"    varchar(2000)
);

-- ---------- TABLE: FilterRangeBearing ----------
drop table if exists "FilterRangeBearing" cascade;
create table "FilterRangeBearing" (
  "ID"           integer generated by default as identity primary key,
  "BlockID"      integer  not null,
  "seq"          smallint not null default 0,
  "Include"      boolean  not null default false,
  "AngleActive"  boolean  not null default true,
  "AngleMin"     double precision not null default -90,
  "AngleMax"     double precision not null default  90,
  "RangeActive"  boolean  not null default true,
  "RangeMin"     double precision not null default 0.0,
  "RangeMax"     double precision not null default 10000.0,
  "Type"         smallint not null default 16
);

-- ---------- TABLE: FolderLink ----------
drop table if exists "FolderLink" cascade;
create table "FolderLink" (
  "ID"       integer generated by default as identity primary key,
  "FolderID" integer not null,
  "BlockID"  integer not null
);

-- ---------- TABLE: GlobalProperties ----------
drop table if exists "GlobalProperties" cascade;
create table "GlobalProperties" (
  "ID"        integer generated by default as identity primary key,
  "Key"       varchar(255) not null,
  "Value"     varchar(255) not null,
  "Category"  varchar(255),
  "Protected" smallint default 0
);

-- ---------- TABLE: Heave ----------
drop table if exists "Heave" cascade;
create table "Heave" (
  "BlockID" integer  not null,
  "seq"     smallint not null default 0,
  "Time"    integer  not null,
  "Heave"   real     not null,
  constraint "PK_Heave" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: Height ----------
drop table if exists "Height" cascade;
create table "Height" (
  "BlockID" integer  not null,
  "seq"     smallint not null default 0,
  "Time"    integer  not null,
  "Height"  real     not null default 0,
  constraint "PK_Height" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: MagneticField ----------
drop table if exists "MagneticField" cascade;
create table "MagneticField" (
  "BlockID" integer  not null,
  "seq"     smallint not null default 0,
  "Time"    integer  not null default 0,
  "MagX"    real     not null,
  "MagY"    real     not null,
  "MagZ"    real     not null,
  constraint "PK_MagneticField" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: Mounting ----------
drop table if exists "Mounting" cascade;
create table "Mounting" (
  "ID"         integer generated by default as identity primary key,
  "BlockID"    integer      not null,
  "SensorType" "SensorType" not null,
  "seq"        smallint     not null default 0,
  "TimeOffset" integer      not null default 0,
  "X"          double precision not null default 0,
  "Y"          double precision not null default 0,
  "Z"          double precision not null default 0,
  "Roll"       double precision not null default 0,
  "Pitch"      double precision not null default 0,
  "Heading"    double precision not null default 0,
  "Name"       varchar(50),
  "SubType"    smallint     not null default 0
);

-- ---------- TABLE: MountingLink ----------
drop table if exists "MountingLink" cascade;
create table "MountingLink" (
  "ID"                    integer generated by default as identity primary key,
  "BlockID"               integer  not null,
  "MountingID"            integer  not null,
  "ParentBlockID"         integer  not null,
  "ParentMountingID"      integer,
  "SensorType"            smallint not null default 0,
  "Enabled"               boolean  not null default true,
  "WeightType"            smallint not null default 1,
  "ScaleStd"              real     not null default 1.0,
  "ScaleRange"            real     not null default 0.0,
  "StdDevConst"           real     not null default 1.0,
  "WeightingVersion"      smallint not null default 0,
  "WeightingVersionUsed"  smallint not null default 0
);

-- ---------- TABLE: Notes ----------
drop table if exists "Notes" cascade;
create table "Notes" (
  "ID"        integer generated by default as identity primary key,
  "FolderID"  integer,
  "BlockID"   integer,
  "Name"      varchar(252),
  "Notes"     text,
  "SizeNotes" integer not null
);

set search_path to public;

-- ---------- TABLE: PipeFlags ----------
drop table if exists "PipeFlags" cascade;
create table "PipeFlags" (
  "BlockID" integer not null,
  "Time"    integer not null,
  "Flag1X"  real    not null,
  "Flag1Z"  real    not null,
  "Flag2X"  real    not null,
  "Flag2Z"  real    not null,
  "Flag3X"  real    not null,
  "Flag3Z"  real    not null,
  "Flag4X"  real    not null,
  "Flag4Z"  real    not null,
  "Flag5X"  real    not null,
  "Flag5Z"  real    not null,
  "Flag6X"  real    not null,
  "Flag6Z"  real    not null,
  "Status"  smallint,
  "Quality" smallint,
  constraint "PK_PipeFlags" primary key ("BlockID","Time")
);

-- ---------- TABLE: Pipetracker ----------
drop table if exists "Pipetracker" cascade;
create table "Pipetracker" (
  "BlockID"         integer  not null,
  "Time"            integer  not null,
  "X"               real     not null,
  "Z"               real     not null,
  "Quality"         integer  not null default 16,
  "Altitude"        real     not null default 0.0,
  "CheckCode"       smallint not null default 0,
  "Channel1"        real,
  "Channel2"        real,
  "Channel3"        real,
  "Channel4"        real,
  "Channel5"        real,
  "Channel6"        real,
  "seq"             smallint not null default 0,
  "PipeId"          integer,
  "LeftOuterX"      real,
  "LeftOuterZ"      real,
  "LeftInnerX"      real,
  "LeftInnerZ"      real,
  "RightInnerX"     real,
  "RightInnerZ"     real,
  "RightOuterX"     real,
  "RightOuterZ"     real,
  "RejectionFlag"   integer  not null default 0,
  "SensorStatus"    integer  not null default 0,
  "Mode"            smallint not null default 0,
  "Solution"        smallint not null default 0,
  "VideoHorz"       smallint not null default 0,
  "VideoVert"       smallint not null default 0,
  "SourceType"      smallint not null default 0,
  "PPSStatus"       smallint not null default 0,
  "Yaw"             real     not null default 0,
  "SignalStrength"  real     not null default 0,
  "HorzError"       real     not null default 0,
  "VertError"       real     not null default 0,
  "HorzQuality"     real     not null default 0,
  "VertQuality"     real     not null default 0,
  "DepthOfBurial"   real     not null default 0,
  "Magnetization"   real     not null default 0,
  "Current"         real     not null default 0,
  "CurrentQuality"  real     not null default 0,
  "Frequency"       real     not null default 0,
  "Phase"           real     not null default 0,
  "Incline"         real     not null default 0,
  constraint "PK_Pipetracker" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: PipetrackerFilter ----------
drop table if exists "PipetrackerFilter" cascade;
create table "PipetrackerFilter" (
  "BlockID"                 integer  not null,
  "seq"                     smallint not null default 0,
  "Type"                    smallint not null default 0,
  "Enable"                  boolean  not null default false,
  "EnableHorzDisp"          boolean  not null default false,
  "EnableHorzError"         boolean  not null default false,
  "EnableVertError"         boolean  not null default false,
  "EnableSignalStrength"    boolean  not null default false,
  "EnableRelHeading"        boolean  not null default false,
  "EnableSolution"          boolean  not null default false,
  "HorzDisp"                real     not null default 1.0,
  "HorzError"               real     not null default 9.99,
  "VertError"               real     not null default 0.15,
  "SignalStrength"          real     not null default 4.0,
  "RelHeading"              real     not null default 20,
  "Solution"                smallint not null default 3,
  "EnableSysQuality"        boolean  not null default false,
  "EnableVertRange"         boolean  not null default false,
  "EnableLateralRange"      boolean  not null default false,
  "EnableMinCoilStrengthAll" boolean not null default false,
  "EnableMinCoilStrengthAny" boolean not null default false,
  "VertRange"               real     not null default 3.0,
  "LateralRange"            real     not null default 1.5,
  "MinCoilStrengthAll"      real     not null default 40,
  "MinCoilStrengthAny"      real     not null default 25,
  "SysQualitySelection"     integer  not null default 0,
  "CoilSelectionAll"        integer  not null default 0,
  "CoilSelectionAny"        integer  not null default 0,
  constraint "PK_PipetrackFilter" primary key ("BlockID","seq")
);

-- ---------- TABLE: Pitch ----------
drop table if exists "Pitch" cascade;
create table "Pitch" (
  "BlockID" integer  not null,
  "seq"     smallint not null default 0,
  "Time"    integer  not null,
  "Pitch"   real     not null,
  constraint "PK_Pitch" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: Projection ----------
drop table if exists "Projection" cascade;
create table "Projection" (
  "ID"              integer generated by default as identity primary key,
  "BlockID"         integer,
  "Name"            varchar(255),
  "Type"            integer,
  "Scale"           double precision,
  "FirstParallel"   double precision,
  "SecondParallel"  double precision,
  "Longitude"       double precision,
  "Latitude"        double precision,
  "Easting"         double precision,
  "Northing"        double precision,
  "Zone"            smallint,
  "SubType"         smallint not null default 0
);

-- ---------- TABLE: RateGyro ----------
drop table if exists "RateGyro" cascade;
create table "RateGyro" (
  "BlockID" integer  not null,
  "seq"     smallint not null default 0,
  "Time"    integer  not null default 0,
  "dGyroX"  real     not null,
  "dGyroY"  real     not null,
  "dGyroZ"  real     not null,
  constraint "PK_RateGyro" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: RecalcBathyOcean ----------
drop table if exists "RecalcBathyOcean" cascade;
create table "RecalcBathyOcean" (
  "ID"                integer generated by default as identity primary key,
  "BlockID"           integer  not null,
  "AutoRecalc"        smallint not null default 0,
  "PressureType"      smallint not null default 0,
  "SurfacePressureSeq" smallint,
  "FixedPressure"     double precision,
  "ReferencePressure" double precision,
  "CalculationType"   smallint not null default 0,
  "ConstDensity"      double precision
);

-- ---------- TABLE: RecalcGPSTide ----------
drop table if exists "RecalcGPSTide" cascade;
create table "RecalcGPSTide" (
  "ID"                   integer generated by default as identity primary key,
  "BlockID"              integer  not null,
  "AutoRecalc"           smallint not null default 0,
  "GPSTimeOffset"        integer,
  "GeoideType"           smallint not null default 0,
  "FixedGeoideHeight"    double precision,
  "ExtraGeoideFileHeight" double precision,
  "GeoideFile"           varchar(256),
  "SquatType"            smallint not null default 0,
  "SquatV2"              double precision,
  "SquatV1"              double precision,
  "SquatV0"              double precision,
  "SquatFile"            varchar(256),
  "DynamicDraft"         smallint not null default 0,
  "DynDraftSourceSeq"    smallint,
  "DynDraftName"         varchar(128),
  "DynDraftScale2m"      double precision
);

-- ---------- TABLE: Report ----------
drop table if exists "Report" cascade;
create table "Report" (
  "ID"       integer generated by default as identity primary key,
  "BlockID"  integer not null,
  "Text"     text,
  "SizeText" integer not null
);

-- ---------- TABLE: Roll ----------
drop table if exists "Roll" cascade;
create table "Roll" (
  "BlockID" integer  not null,
  "seq"     smallint not null default 0,
  "Time"    integer  not null,
  "Roll"    real     not null,
  constraint "PK_Roll" primary key ("BlockID","seq","Time")
);

-- ---------- TABLE: Scan ----------
drop table if exists "Scan" cascade;
create table "Scan" (
  "BlockID"           integer  not null,
  "Time"              integer  not null,
  "EchosounderNumber" smallint not null,
  "ScanNumber"        integer  default 0,
  "SoundVelocity"     double precision not null,
  "NumberOfBeams"     smallint not null,
  "Duration"          integer,
  "Type"              smallint not null default 16,
  "DetectionNumber"   smallint not null default 0,
  "PackedBeams"       bytea    not null,
  "Frequency"         integer  not null default 0,
  constraint "PK_Scan" primary key ("BlockID","Type","Time","EchosounderNumber","DetectionNumber")
);

-- ---------- TABLE: ScanSector ----------
drop table if exists "ScanSector" cascade;
create table "ScanSector" (
  "BlockID"         integer  not null,
  "seq"             smallint not null default 0,
  "Time"            integer  not null,
  "DetectionNumber" smallint not null default 0,
  "Type"            smallint not null default 16,
  "Sector"          smallint not null default 0,
  "TransmitDelay"   integer  not null default 0,
  constraint "PK_ScanSector" primary key ("BlockID","seq","Time","Type","DetectionNumber","Sector")
);

-- ---------- TABLE: SelectedBlocks ----------
drop table if exists "SelectedBlocks" cascade;
create table "SelectedBlocks" (
  "BlockID" integer not null
);

-- ---------- TABLE: SelectedDataSource ----------
drop table if exists "SelectedDataSource" cascade;
create table "SelectedDataSource" (
  "ID"          integer generated by default as identity primary key,
  "BlockID"     integer  not null,
  "GyroSeq"     smallint not null default 0,
  "MotionSeq"   smallint not null default 0,
  "BathySeq"    smallint not null default 0,
  "SpeedlogSeq" smallint not null default 0,
  "PosSeq"      smallint not null default 0,
  "InsSeq"      smallint not null default 0,
  "HeightSeq"   smallint not null default 0,
  "PipeSeq"     smallint not null default 0,
  "AuxSeq"      smallint not null default 0,
  "HeaveSeq"    smallint not null default 0
);

-- ---------- TABLE: SelectedMultiSource ----------
drop table if exists "SelectedMultiSource" cascade;
create table "SelectedMultiSource" (
  "ID"         integer generated by default as identity primary key,
  "BlockID"    integer      not null,
  "SensorType" "SensorType" not null default 0,
  "seq"        smallint     not null default 0,
  "Enabled"    boolean      not null default true
);

-- ---------- TABLE: SequenceLink ----------
drop table if exists "SequenceLink" cascade;
create table "SequenceLink" (
  "ID"         integer generated by default as identity primary key,
  "BlockID"    integer  not null,
  "ParentType" smallint not null default 0,
  "ParentSeq"  smallint not null default 0,
  "ChildType"  smallint not null default 0,
  "ChildSeq"   smallint not null default 0
);

-- ---------- TABLE: SequencePresent ----------
drop table if exists "SequencePresent" cascade;
create table "SequencePresent" (
  "ID"         integer generated by default as identity primary key,
  "BlockID"    integer      not null,
  "SensorType" "SensorType" not null,
  "SeqNo"      smallint     not null
);

-- ---------- TABLE: SidscanMbeMapping ----------
drop table if exists "SidscanMbeMapping" cascade;
create table "SidscanMbeMapping" (
  "ID"          integer generated by default as identity primary key,
  "BlockID"     integer  not null,
  "SidescanSeq" smallint not null default 0,
  "MbeSeq"      smallint not null default 0
);

-- ---------- TABLE: SingleDataSpecification ----------
drop table if exists "SingleDataSpecification" cascade;
create table "SingleDataSpecification" (
  "ID"                   integer generated by default as identity primary key,
  "BlockID"              integer  not null,
  "SpecificationNumber"  smallint not null,
  "Flags"                integer  not null default 0,
  "DataType"             integer  not null default 0
);

-- ---------- TABLE: SoundVelocityCorrection ----------
drop table if exists "SoundVelocityCorrection" cascade;
create table "SoundVelocityCorrection" (
  "BlockID"   integer   not null,
  "Date"      timestamp without time zone not null,
  "Depth"     real      not null,
  "Correction" real     not null default 0,
  constraint "PK_SOUNDVELOCITYCORRECTION" primary key ("BlockID","Date","Depth")
);

-- ---------- TABLE: SoundVelocityLayer ----------
drop table if exists "SoundVelocityLayer" cascade;
create table "SoundVelocityLayer" (
  "ID"           integer generated by default as identity primary key,
  "BlockID"      integer not null,
  "Depth"        double precision not null,
  "Velocity"     double precision not null,
  "Pressure"     double precision,
  "Density"      double precision,
  "Salinity"     double precision,
  "Conductivity" double precision,
  "Temperature"  double precision
);

-- ---------- TABLE: Squat ----------
drop table if exists "Squat" cascade;
create table "Squat" (
  "ID"        integer generated by default as identity primary key,
  "BlockID"   integer not null,
  "SettingID" integer not null,
  "Speed"     double precision not null default 0,
  "Squat"     double precision not null default 0
);

-- ---------- TABLE: SquatSetting ----------
drop table if exists "SquatSetting" cascade;
create table "SquatSetting" (
  "ID"        integer generated by default as identity primary key,
  "BlockID"   integer not null,
  "SmoothType" integer not null default 0,
  "StepType"   integer not null default 0,
  "Samples"    double precision not null default 5,
  "Setting1"   double precision not null default 0,
  "Setting2"   double precision not null default 0,
  "Setting3"   double precision not null default 0,
  "Setting4"   double precision not null default 0,
  "Setting5"   double precision not null default 0,
  "Setting6"   double precision not null default 0
);

-- ---------- TABLE: StreamerBirdData ----------
drop table if exists "StreamerBirdData" cascade;
create table "StreamerBirdData" (
  "BlockID"  integer not null,
  "BirdIndex" integer not null,
  "Time"     integer not null,
  "Heading"  double precision,
  "Depth"    double precision,
  constraint "PK_StreamerBirdData" primary key ("BlockID","BirdIndex","Time")
);

-- ---------- TABLE: StreamerBirdSetup ----------
drop table if exists "StreamerBirdSetup" cascade;
create table "StreamerBirdSetup" (
  "BlockID"   integer not null,
  "GroupIndex" integer not null,
  "Distance"  double precision not null,
  "Flags"     integer not null,
  constraint "PK_StreamerBirdSetup" primary key ("BlockID","GroupIndex")
);

-- ---------- TABLE: StreamerReceiverGroupSetup ----------
drop table if exists "StreamerReceiverGroupSetup" cascade;
create table "StreamerReceiverGroupSetup" (
  "BlockID"   integer not null,
  "GroupIndex" integer not null,
  "Distance"  double precision not null,
  "Flags"     integer not null,
  constraint "PK_StreamerReceiverGroupSetup" primary key ("BlockID","GroupIndex")
);

-- ---------- TABLE: SurfacePressure ----------
drop table if exists "SurfacePressure" cascade;
create table "SurfacePressure" (
  "BlockId" integer not null,
  "Time"    integer not null,
  "Pressure" real,
  constraint "PK_SurfacePressure" primary key ("BlockId","Time")
);

-- ---------- TABLE: SurveyPerimeter ----------
drop table if exists "SurveyPerimeter" cascade;
create table "SurveyPerimeter" (
  "BlockID"      integer  not null,
  "PerimeterNo"  smallint not null default 1,
  "PointNo"      smallint not null default 1,
  "PointGroupNo" smallint not null default 1,
  "SegmentType"  smallint not null default 1,
  "Easting"      double precision not null default 0,
  "Northing"     double precision not null default 0,
  "Depth"        double precision,
  "OtherCRS_X"   double precision,
  "OtherCRS_Y"   double precision,
  "OtherCRS_Z"   double precision,
  constraint "PK_SurveyPerimeter" primary key ("BlockID","PerimeterNo","PointNo","SegmentType")
);

-- ---------- TABLE: SurveyPerimeterDef ----------
drop table if exists "SurveyPerimeterDef" cascade;
create table "SurveyPerimeterDef" (
  "BlockID"       integer  not null,
  "PerimeterNo"   smallint not null default 1,
  "Name"          varchar(128),
  "CRS_A"         smallint not null,
  "CRS_B"         smallint not null,
  "PerimeterType" smallint not null default 1,
  "TypeDesc"      varchar(128),
  "ExtensionNo"   smallint not null default 1,
  "Extension"     varchar(256),
  constraint "PK_SurveyPerimeterDef" primary key ("BlockID","PerimeterNo")
);

-- ---------- TABLE: Tide ----------
drop table if exists "Tide" cascade;
create table "Tide" (
  "BlockID" integer not null,
  "Time"    integer not null,
  "Tide"    real,
  constraint "PK_Tide" primary key ("BlockID","Time")
);

-- ---------- TABLE: TPE_Scan ----------
drop table if exists "TPE_Scan" cascade;
create table "TPE_Scan" (
  "BlockID"           integer  not null,
  "EchosounderNumber" smallint not null,
  "Version"           integer  not null,
  "BlockCount"        integer  not null,
  "Results"           bytea,
  constraint "PK_TPE" primary key ("BlockID","EchosounderNumber")
);

-- ---------- TABLE: Track ----------
drop table if exists "Track" cascade;
create table "Track" (
  "BlockID" integer  not null,
  "Time"    integer  not null,
  "seq"     smallint not null default 0,
  "Type"    smallint not null default 0,
  "RawSeq"  smallint not null default 0,
  "Easting" double precision not null default 0,
  "Northing" double precision not null default 0,
  "Depth"   double precision not null default 0,
  "Quality" integer not null default 0,
  constraint "PK_Track" primary key ("BlockID","Time","seq","Type")
);

-- ---------- TABLE: UnitOfMeasure ----------
drop table if exists "UnitOfMeasure" cascade;
create table "UnitOfMeasure" (
  "BlockID"             integer  not null,
  "Number"              smallint not null default 1,
  "Name"                varchar(128),
  "TypeName"            varchar(128),
  "FormatRef"           smallint not null,
  "BaseUnitNumber"      smallint,
  "ConversionFactorA"   double precision,
  "ConversionFactorB"   double precision,
  "ConversionFactorC"   double precision,
  "ConversionFactorD"   double precision,
  "Description"         varchar(128),
  "EpsgCode"            integer,
  "SourceDesc"          varchar(128),
  "SourceVersionDetails" varchar(128),
  "SourceUnitCode"      varchar(128),
  constraint "PK_UnitOfMeasure" primary key ("BlockID","Number")
);

-- ---------- TABLE: UserOffset ----------
drop table if exists "UserOffset" cascade;
create table "UserOffset" (
  "ID"      integer generated by default as identity,
  "Type"    integer,
  "Name"    varchar(50) not null,
  "X"       double precision not null,
  "Y"       double precision not null,
  "Z"       double precision not null,
  "Comment" varchar(1024)
);
-- (No primary key was defined in the source script.)

-- ---------- TABLE: Version ----------
drop table if exists "Version" cascade;
create table "Version" (
  "V1" integer not null,
  "V2" integer not null,
  "V3" integer not null,
  "V4" integer not null
);



-- -----------------------------------------------------------
-- Foreign Keys
-- -----------------------------------------------------------

-- Block <-> Folder
ALTER TABLE ONLY "Block"
  ADD CONSTRAINT "FK_Block_Folder1"
  FOREIGN KEY ("FolderID") REFERENCES "Folder" ("ID");

-- Acceleration
ALTER TABLE ONLY "Acceleration"
  ADD CONSTRAINT "FK_Acceleration_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Alarm
ALTER TABLE ONLY "Alarm"
  ADD CONSTRAINT "FK_Alarm_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Auxiliary
ALTER TABLE ONLY "Auxiliary"
  ADD CONSTRAINT "FK_Auxiliary_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Bathy
ALTER TABLE ONLY "Bathy"
  ADD CONSTRAINT "FK_Bathy_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Bin
ALTER TABLE ONLY "Bin"
  ADD CONSTRAINT "FK_Bin_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

-- BinGrid
ALTER TABLE ONLY "BinGrid"
  ADD CONSTRAINT "FK_BinGrid_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

-- BinGridUnit → BinGrid (composite)
ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_BinGrid"
  FOREIGN KEY ("BlockID","Number") REFERENCES "BinGrid" ("BlockID","Number");

-- BinGridUnit → Block
ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

-- BinGridUnit → UnitOfMeasure (various unit reference columns)
ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_UnitOfMeasure_BinScale"
  FOREIGN KEY ("BlockID","BinScale") REFERENCES "UnitOfMeasure" ("BlockID","Number");

ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_UnitOfMeasure_MapBearingJ"
  FOREIGN KEY ("BlockID","MapBearingJ") REFERENCES "UnitOfMeasure" ("BlockID","Number");

ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_UnitOfMeasure_NodeIncI"
  FOREIGN KEY ("BlockID","NodeIncI") REFERENCES "UnitOfMeasure" ("BlockID","Number");

ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_UnitOfMeasure_NodeIncJ"
  FOREIGN KEY ("BlockID","NodeIncJ") REFERENCES "UnitOfMeasure" ("BlockID","Number");

ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_UnitOfMeasure_OriginEasting"
  FOREIGN KEY ("BlockID","OriginEasting") REFERENCES "UnitOfMeasure" ("BlockID","Number");

ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_UnitOfMeasure_OriginI"
  FOREIGN KEY ("BlockID","OriginI") REFERENCES "UnitOfMeasure" ("BlockID","Number");

ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_UnitOfMeasure_OriginJ"
  FOREIGN KEY ("BlockID","OriginJ") REFERENCES "UnitOfMeasure" ("BlockID","Number");

ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_UnitOfMeasure_OriginNorthing"
  FOREIGN KEY ("BlockID","OriginNorthing") REFERENCES "UnitOfMeasure" ("BlockID","Number");

ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_UnitOfMeasure_WidthI"
  FOREIGN KEY ("BlockID","WidthI") REFERENCES "UnitOfMeasure" ("BlockID","Number");

ALTER TABLE ONLY "BinGridUnit"
  ADD CONSTRAINT "FK_BinGridUnit_UnitOfMeasure_WidthJ"
  FOREIGN KEY ("BlockID","WidthJ") REFERENCES "UnitOfMeasure" ("BlockID","Number");

-- BinNodeDefinition
ALTER TABLE ONLY "BinNodeDefinition"
  ADD CONSTRAINT "FK_BinNodeDefinition_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

ALTER TABLE ONLY "BinNodeDefinition"
  ADD CONSTRAINT "FK_BinNodeDefinition_CRS_A"
  FOREIGN KEY ("BlockID","CRS_A") REFERENCES "CRS" ("BlockID","Number");

ALTER TABLE ONLY "BinNodeDefinition"
  ADD CONSTRAINT "FK_BinNodeDefinition_CRS_B"
  FOREIGN KEY ("BlockID","CRS_B") REFERENCES "CRS" ("BlockID","Number");

-- BlockLink
ALTER TABLE ONLY "BlockLink"
  ADD CONSTRAINT "FK_BlockLink_Block_Parent"
  FOREIGN KEY ("ParentID") REFERENCES "Block" ("ID");
ALTER TABLE ONLY "BlockLink"
  ADD CONSTRAINT "FK_BlockLink_Block_Child"
  FOREIGN KEY ("ChildID") REFERENCES "Block" ("ID");

-- C_O
ALTER TABLE ONLY "C_O"
  ADD CONSTRAINT "FK_C_O_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- CRS
ALTER TABLE ONLY "CRS"
  ADD CONSTRAINT "FK_CRS_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

ALTER TABLE ONLY "CRS"
  ADD CONSTRAINT "FK_CRS_UnitOfMeasure"
  FOREIGN KEY ("BlockID","UnitOfMeasure") REFERENCES "UnitOfMeasure" ("BlockID","Number");

-- DatumShift
ALTER TABLE ONLY "DatumShift"
  ADD CONSTRAINT "FK_DatumShift_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

ALTER TABLE ONLY "DatumShift"
  ADD CONSTRAINT "FK_DatumShift_Ellipsoid_Source"
  FOREIGN KEY ("SourceEllipsoid") REFERENCES "Ellipsoid" ("ID");

ALTER TABLE ONLY "DatumShift"
  ADD CONSTRAINT "FK_DatumShift_Ellipsoid_Destination"
  FOREIGN KEY ("DestinationEllipsoid") REFERENCES "Ellipsoid" ("ID");

ALTER TABLE ONLY "DatumShift"
  ADD CONSTRAINT "FK_DatumShift_Projection_Source"
  FOREIGN KEY ("SourceProjection") REFERENCES "Projection" ("ID");

ALTER TABLE ONLY "DatumShift"
  ADD CONSTRAINT "FK_DatumShift_Projection_Destination"
  FOREIGN KEY ("DestinationProjection") REFERENCES "Projection" ("ID");

-- Depth
ALTER TABLE ONLY "Depth"
  ADD CONSTRAINT "FK_Depth_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- DigitizedLine
ALTER TABLE ONLY "DigitizedLine"
  ADD CONSTRAINT "FK_DigitizedLine_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- DopplerLog
ALTER TABLE ONLY "DopplerLog"
  ADD CONSTRAINT "FK_DopplerLog_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- DynamicOffset
ALTER TABLE ONLY "DynamicOffset"
  ADD CONSTRAINT "FK_DynamicOffset_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- EchosounderSpecification
ALTER TABLE ONLY "EchosounderSpecification"
  ADD CONSTRAINT "FK_EchosounderSpecification_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- EditReport
ALTER TABLE ONLY "EditReport"
  ADD CONSTRAINT "FK_EditReport_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Ellipsoid
ALTER TABLE ONLY "Ellipsoid"
  ADD CONSTRAINT "FK_Ellipsoid_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- EPSG
ALTER TABLE ONLY "EPSG"
  ADD CONSTRAINT "FK_EPSG_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- FilterRangeBearing
ALTER TABLE ONLY "FilterRangeBearing"
  ADD CONSTRAINT "FK_FilterRangeBearing_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Folder (self-reference)
ALTER TABLE ONLY "Folder"
  ADD CONSTRAINT "FK_Folder_Folder"
  FOREIGN KEY ("ParentID") REFERENCES "Folder" ("ID");

-- FolderLink
ALTER TABLE ONLY "FolderLink"
  ADD CONSTRAINT "FK_FolderLink_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");
ALTER TABLE ONLY "FolderLink"
  ADD CONSTRAINT "FK_FolderLink_Folder"
  FOREIGN KEY ("FolderID") REFERENCES "Folder" ("ID");

-- GPSStatus
ALTER TABLE ONLY "GPSStatus"
  ADD CONSTRAINT "FK_GPSStatus_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Gyro
ALTER TABLE ONLY "Gyro"
  ADD CONSTRAINT "FK_Gyro_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Heave
ALTER TABLE ONLY "Heave"
  ADD CONSTRAINT "FK_Heave_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Height
ALTER TABLE ONLY "Height"
  ADD CONSTRAINT "FK_Height_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- MagneticField
ALTER TABLE ONLY "MagneticField"
  ADD CONSTRAINT "FK_MagneticField_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Mounting
ALTER TABLE ONLY "Mounting"
  ADD CONSTRAINT "FK_Mounting_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- MountingLink (logical corrections: include parent link columns)
ALTER TABLE ONLY "MountingLink"
  ADD CONSTRAINT "FK_MountingLink_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

ALTER TABLE ONLY "MountingLink"
  ADD CONSTRAINT "FK_MountingLink_ParentBlock"
  FOREIGN KEY ("ParentBlockID") REFERENCES "Block" ("ID");

ALTER TABLE ONLY "MountingLink"
  ADD CONSTRAINT "FK_MountingLink_Mounting"
  FOREIGN KEY ("MountingID") REFERENCES "Mounting" ("ID");

ALTER TABLE ONLY "MountingLink"
  ADD CONSTRAINT "FK_MountingLink_ParentMounting"
  FOREIGN KEY ("ParentMountingID") REFERENCES "Mounting" ("ID");

-- Notes
ALTER TABLE ONLY "Notes"
  ADD CONSTRAINT "FK_Notes_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");
ALTER TABLE ONLY "Notes"
  ADD CONSTRAINT "FK_Notes_Folder"
  FOREIGN KEY ("FolderID") REFERENCES "Folder" ("ID");

-- PipeFlags
ALTER TABLE ONLY "PipeFlags"
  ADD CONSTRAINT "FK_PipeFlags_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Pipetracker
ALTER TABLE ONLY "Pipetracker"
  ADD CONSTRAINT "FK_Pipetracker_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- PipetrackerFilter
ALTER TABLE ONLY "PipetrackerFilter"
  ADD CONSTRAINT "FK_PipetrackerFilter_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

-- Pitch
ALTER TABLE ONLY "Pitch"
  ADD CONSTRAINT "FK_Pitch_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Position
ALTER TABLE ONLY "Position"
  ADD CONSTRAINT "FK_Position_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Projection
ALTER TABLE ONLY "Projection"
  ADD CONSTRAINT "FK_Projection_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- RateGyro
ALTER TABLE ONLY "RateGyro"
  ADD CONSTRAINT "FK_RateGyro_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- RecalcBathyOcean
ALTER TABLE ONLY "RecalcBathyOcean"
  ADD CONSTRAINT "FK_RecalcBathyOcean_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- RecalcGPSTide
ALTER TABLE ONLY "RecalcGPSTide"
  ADD CONSTRAINT "FK_RecalcGPSTide_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Report
ALTER TABLE ONLY "Report"
  ADD CONSTRAINT "FK_Report_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Roll
ALTER TABLE ONLY "Roll"
  ADD CONSTRAINT "FK_Roll_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Scan
ALTER TABLE ONLY "Scan"
  ADD CONSTRAINT "FK_Scan_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- ScanSector
ALTER TABLE ONLY "ScanSector"
  ADD CONSTRAINT "FK_ScanSector_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

-- SelectedBlocks
ALTER TABLE ONLY "SelectedBlocks"
  ADD CONSTRAINT "FK_SelectedBlocks_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- SelectedDataSource
ALTER TABLE ONLY "SelectedDataSource"
  ADD CONSTRAINT "FK_SelectedDataSource_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- SelectedMultiSource
ALTER TABLE ONLY "SelectedMultiSource"
  ADD CONSTRAINT "FK_SelectedMultiSource_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- SequenceLink
ALTER TABLE ONLY "SequenceLink"
  ADD CONSTRAINT "FK_SequenceLink_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- SequencePresent
ALTER TABLE ONLY "SequencePresent"
  ADD CONSTRAINT "FK_SequencePresent_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- SidscanMbeMapping
ALTER TABLE ONLY "SidscanMbeMapping"
  ADD CONSTRAINT "FK_SidscanMbeMapping_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

-- SingleDataSpecification
ALTER TABLE ONLY "SingleDataSpecification"
  ADD CONSTRAINT "FK_SingleDataSpecification_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- SoundVelocityCorrection
ALTER TABLE ONLY "SoundVelocityCorrection"
  ADD CONSTRAINT "FK_SoundVelocityCorrection_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

-- SoundVelocityLayer
ALTER TABLE ONLY "SoundVelocityLayer"
  ADD CONSTRAINT "FK_SoundVelocityLayer_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Squat
ALTER TABLE ONLY "Squat"
  ADD CONSTRAINT "FK_Squat_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");
ALTER TABLE ONLY "Squat"
  ADD CONSTRAINT "FK_Squat_SettingID"
  FOREIGN KEY ("SettingID") REFERENCES "SquatSetting" ("ID");

-- SquatSetting
ALTER TABLE ONLY "SquatSetting"
  ADD CONSTRAINT "FK_SquatSetting_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- StreamerBirdData
ALTER TABLE ONLY "StreamerBirdData"
  ADD CONSTRAINT "FK_StreamerBirdData_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- StreamerBirdSetup
ALTER TABLE ONLY "StreamerBirdSetup"
  ADD CONSTRAINT "FK_StreamerBirdSetup_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- StreamerReceiverGroupSetup
ALTER TABLE ONLY "StreamerReceiverGroupSetup"
  ADD CONSTRAINT "FK_StreamerReceiverGroupSetup_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- SurfacePressure
ALTER TABLE ONLY "SurfacePressure"
  ADD CONSTRAINT "FK_SurfacePressure_Block"
  FOREIGN KEY ("BlockId") REFERENCES "Block" ("ID");

-- SurveyBlock
ALTER TABLE ONLY "SurveyBlock"
  ADD CONSTRAINT "FK_SurveyBlock_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- SurveyPerimeter
ALTER TABLE ONLY "SurveyPerimeter"
  ADD CONSTRAINT "FK_SurveyPerimeter_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

-- SurveyPerimeterDef
ALTER TABLE ONLY "SurveyPerimeterDef"
  ADD CONSTRAINT "FK_SurveyPerimeterDef_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

ALTER TABLE ONLY "SurveyPerimeterDef"
  ADD CONSTRAINT "FK_SurveyPerimeterDef_CRS_A"
  FOREIGN KEY ("BlockID","CRS_A") REFERENCES "CRS" ("BlockID","Number");

ALTER TABLE ONLY "SurveyPerimeterDef"
  ADD CONSTRAINT "FK_SurveyPerimeterDef_CRS_B"
  FOREIGN KEY ("BlockID","CRS_B") REFERENCES "CRS" ("BlockID","Number");

-- Tide
ALTER TABLE ONLY "Tide"
  ADD CONSTRAINT "FK_Tide_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- TPE_Scan
ALTER TABLE ONLY "TPE_Scan"
  ADD CONSTRAINT "FK_TPE_Scan_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID");

-- Track
ALTER TABLE ONLY "Track"
  ADD CONSTRAINT "FK_Track_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;

-- UnitOfMeasure
ALTER TABLE ONLY "UnitOfMeasure"
  ADD CONSTRAINT "FK_UnitOfMeasure_Block"
  FOREIGN KEY ("BlockID") REFERENCES "Block" ("ID")
  ON DELETE CASCADE;


-- ---------- VIEW: PositionView ----------
-- SQL Server WHERE used: p.DOP <= sb.MaxDOP AND (p.Quality > 0)
-- Same semantics in PostgreSQL (NULLs filter out naturally).
drop view if exists "PositionView";
create view "PositionView" as
select p.*
from "Position" as p
join "SurveyBlock" as sb
  on p."BlockID" = sb."BlockID"
 and p."DOP" <= sb."MaxDOP"
 and (p."Quality" > 0);

-- ---------- VIEW: PositionGPSStatus ----------
drop view if exists "PositionGPSStatus";
create view "PositionGPSStatus" as
select p.*,
       s."HDOP", s."VDOP", s."PDOP", s."NoSat",
       s."Quality" as "GPSQuality", s."FixStatus", s."RefStationNo"
from "Position" p
left join "GPSStatus" s
  on p."BlockID" = s."BlockID"
 and p."seq"     = s."seq"
 and p."Time"    = s."Time";

-- ---------- VIEW: PositionGPSStatusView ----------
drop view if exists "PositionGPSStatusView";
create view "PositionGPSStatusView" as
select p.*,
       s."HDOP", s."VDOP", s."PDOP", s."NoSat",
       s."Quality" as "GPSQuality", s."FixStatus", s."RefStationNo"
from "PositionView" p
left join "GPSStatus" s
  on p."BlockID" = s."BlockID"
 and p."seq"     = s."seq"
 and p."Time"    = s."Time";


-- GyroView
DROP VIEW IF EXISTS "GyroView";
CREATE VIEW "GyroView" AS
SELECT
  "BlockID",
  "seq",
  "Time",
  ("Gyro" + "GyroCorr") AS "Gyro",
  "GyroCorr"
FROM "Gyro";

-- PositionStat (STDEV → stddev)
DROP VIEW IF EXISTS "PositionStat";
CREATE VIEW "PositionStat" AS
SELECT
  b."ID"                    AS "BlockID",
  MIN(p."Easting")          AS "EastingMin",
  MAX(p."Easting")          AS "EastingMax",
  MIN(p."Northing")         AS "NorthingMin",
  MAX(p."Northing")         AS "NorthingMax",
  MIN(p."Kp")               AS "KPMin",
  MAX(p."Kp")               AS "KPMax",
  MIN(p."Fix")              AS "FixMin",
  MAX(p."Fix")              AS "FixMax",
  MIN(p."DOP")              AS "DOPMin",
  MAX(p."DOP")              AS "DOPMax",
  stddev(p."DOP")           AS "DOPStdDev"
FROM "Block" b
JOIN "SelectedDataSource" sel
  ON b."ID" = sel."BlockID"
JOIN "SurveyBlock" sb
  ON b."ID" = sb."BlockID"
JOIN "Position" p
  ON b."ID" = p."BlockID"
 AND p."seq" = sel."PosSeq"
 AND p."DOP" <= sb."MaxDOP"
 AND p."Quality" > 0
GROUP BY b."ID";
